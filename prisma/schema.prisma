generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  firstName String?
  lastName  String?
  role      String   @default("CUSTOMER") // Changed from Role enum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  
  // NextAuth
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id           String     @id @default(cuid())
  name         String
  slug         String     @unique
  description  String?
  image        String?
  parentId     String?
  gender       String     @default("UNISEX") // Changed from Gender enum
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String
  shortDesc     String?
  price         Float
  comparePrice  Float?
  sku           String   @unique
  categoryId    String
  brand         String?
  tags          String   @default("")
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  stockQuantity Int      @default(0)
  weight        Float?
  dimensions    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category     Category          @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  variants     ProductVariant[]
  reviews      Review[]
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@map("products")
}

model ProductImage {
  id           String  @id @default(cuid())
  productId    String
  url          String
  altText      String?
  displayOrder Int     @default(0)
  isMain       Boolean @default(false)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  size      String?
  color     String?
  colorHex  String?
  stock     Int     @default(0)
  price     Float
  sku       String  @unique

  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(cuid())
  sessionId String   
  productId String
  variantId String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Address {
  id          String  @id @default(cuid())
  userId      String
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  zipCode     String
  country     String
  phone       String?
  isDefault   Boolean @default(false)
  type        String  @default("SHIPPING") // Changed from AddressType enum

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  email           String
  firstName       String      
  lastName        String
  phone           String
  status          String      @default("PENDING") // Changed from OrderStatus enum
  subtotal        Float
  tax             Float
  shipping        Float
  total           Float
  currency        String      @default("KSH")
  paymentStatus   String      @default("PENDING") // Changed from PaymentStatus enum
  paymentMethod   String?
  mpesaReceiptId  String?     
  sessionId       String?     
  
  // Shipping Address (embedded for guest orders)
  shippingFirstName   String
  shippingLastName    String
  shippingAddress     String
  shippingCity        String
  shippingCounty      String
  shippingPhone       String?
  
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  tracking        OrderTracking[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Float
  name      String
  image     String?

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model OrderTracking {
  id          String   @id @default(cuid())
  orderId     String
  status      String
  description String?
  location    String?
  createdAt   DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_tracking")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  title     String?
  content   String
  isVerified Boolean @default(false)
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
  @@map("reviews")
}

// Note: Enums converted to string constants for SQLite compatibility
// Valid values:
// Role: "CUSTOMER" | "ADMIN" | "SUPER_ADMIN"
// Gender: "MALE" | "FEMALE" | "UNISEX"
// AddressType: "SHIPPING" | "BILLING"
// OrderStatus: "PENDING" | "PROCESSING" | "SHIPPED" | "DELIVERED" | "CANCELLED" | "REFUNDED"
// PaymentStatus: "PENDING" | "PAID" | "FAILED" | "REFUNDED"
